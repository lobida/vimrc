set tw=80
set colorcolumn=81
autocmd FileType json,aws.json setlocal expandtab shiftwidth=2 softtabstop=2
autocmd FileType eruby,erb,html.erb setlocal expandtab shiftwidth=2 softtabstop=2
autocmd FileType python setlocal expandtab shiftwidth=4 softtabstop=4 tabstop=4 autoindent fo=croqt

" for vim-chef plugin to set ft=ruby.chef
autocmd BufNewFile,BufRead */cookbooks/*/\(attributes\|definitions\|libraries\|providers\|recipes\|resources\)/*.rb set filetype=ruby.chef

autocmd BufNewFile,BufRead */cookbooks/*/templates/*/*.erb set filetype=eruby.chef
autocmd BufNewFile,BufRead */cookbooks/*/metadata.rb set filetype=ruby.chef

autocmd BufNewFile,BufRead */chef-repo/environments/*.rb set filetype=ruby.chef
autocmd BufNewFile,BufRead */chef-repo/roles/*.rb set filetype=ruby.chef
" set filetype
" au BufNewFile,BufRead *.template set filetype=aws.json
" http://stackoverflow.com/questions/11404800/fix-vim-tmux-yank-paste-on-unnamed-register
if $TMUX == ''
    set clipboard+=unnamed
endif
if exists('$TMUX')
    set term=screen-256color
endif
"set clipboard=unnamed
" Disable cursorline as it slows vim considerably
set cursorline

" Disable folding
set nofoldenable
" set right encoding to prevent strange chars
set encoding=utf-8
set fileencodings=utf-8
set fileformat=unix
set wrap
set pastetoggle=<F2>

" vmap for erb (helpless?)
":vmap sb "zdi<b><C-R>z</b><Esc> : wrap <b></b> around visually selected text
":vmap st "zdi<?= <C-R>z ?><Esc> : wrap <?= ?> around visually selected text
":vmap se "zdi<%= <C-R>z %><Esc> : wrap <?= ?> around visually selected text
":vmap sr "zdi<% <C-R>z %><Esc> : wrap <?= ?> around visually selected text
" source $MYVIMRC reloads the saved $MYVIMRC
:nmap <Leader>s :source $MYVIMRC
" fix e484 windows https://github.com/mattn/gist-vim/issues/48
if has('win32') || has('win64')
    set shell=cmd
    set shellcmdflag=/c
endif
" Ctrlp key mapping
map <leader>pb :CtrlPBuffer<Cr>
map <leader>pt :CtrlPTag<Cr>
map <leader>pp :CtrlP<Cr>
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux

let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }
let g:ctrlp_by_filename = 0
let g:ctrlp_regexp = 1
" let g:ctrlp_user_command = 'find %s -type f'        " MacOSX/Linux
" Buffer Mapping
nnoremap <silent>[b :bprevious<CR>
nnoremap <silent>]b :bnext<CR>
nnoremap <silent>[B :bfirst<CR>
nnoremap <silent>]B :blast<CR>
nnoremap <silent>[1 :1b<CR>
nnoremap <silent>>2 :2b<CR>
nnoremap <silent>>3 :3b<CR>
nnoremap <silent>>4 :4b<CR>
nnoremap <silent>>5 :5b<CR>
nnoremap <silent>>6 :6b<CR>
nnoremap <silent>>7 :7b<CR>
nnoremap <silent>>8 :8b<CR>
nnoremap <silent>>9 :9b<CR>
nnoremap <silent>>0 :10b<CR>
" EasyMotion
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)
let g:EasyMotion_startofline = 0 " keep cursor column when JK motion
let g:EasyMotion_smartcase = 1
inoremap <expr><CR> neosnippet#expandable() ? neosnippet#mappings#expand_or_jump_impl() : pumvisible() ? neocomplete#close_popup() : "\<CR>"

" neocomplcache

" auto load buff (folding)
" au BufWinLeave * mkview
" fix error detected while processing bufwinleave auto commands for * no file
" name
au BufWinLeave ?* mkview 1
" comment next line for 'error detected while processing function vundle installer run'
" au BufWinEnter ?* silent loadview 1

" syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" airline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#show_tab_nr = 0
let g:airline#extensions#tabline#show_tab_type = 0
let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#left_alt_sep = ''
let g:airline#extensions#tabline#right_sep = ''
let g:airline#extensions#tabline#right_alt_sep = ''
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
let g:airline#extensions#tabline#tab_min_count = 1
let g:airline#extensions#tabline#show_close_button = 0
let g:airline_detect_modified=1
let g:airline_theme='solarized'

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '‚ñ∂'
let g:airline_right_sep = '‚óÄ'
let g:airline_symbols.crypt = 'üîí'
let g:airline_symbols.linenr = '¬∂'
let g:airline_symbols.maxlinenr = '‚ò∞'
let g:airline_symbols.paste = 'œÅ'
let g:airline_symbols.notexists = '‚àÑ'
let g:airline_symbols.whitespace = 'Œû'
let g:airline_symbols.branch = '‚å•'

" use powerline fonts
let g:airline_powerline_fonts = 0

" for windows gvim
if has('gui_running')
    set guifont=DejaVu\ Sans\ Mono:h11
endif
" for linux gui
if has('gui') && LINUX()
    set guifont=DejaVu\ Sans\ Mono\ Book\ 11
endif
" for putty
if !has('gui') && LINUX()
endif
" neosnippet neocomplete
" add my snippets for general filetype
if count(g:spf13_bundle_groups, 'neocomplete')
    let g:neosnippet#snippets_directory = '~/.vim/bundle/vim-snippets/snippets,~/.mysnippets'
    let g:neosnippet#scope_aliases = {}
    let g:neosnippet#scope_aliases['j2'] = 'ansible_template'
    let g:neosnippet#scope_aliases['yml'] = 'ansible,yml'
    let g:neosnippet#scope_aliases['ruby'] = 'ruby,rails'
    let g:neosnippet#scope_aliases['sh'] = 'sh'
endif

" add markdown plugin
if count(g:spf13_bundle_groups, 'mymisc')
    Bundle 'rust-lang/rust.vim'
    Bundle 'plasticboy/vim-markdown'
    Bundle 'suan/vim-instant-markdown'
    Bundle 'spf13/vim-preview'
    Bundle 'tpope/vim-cucumber'
    Bundle 'cespare/vim-toml'
    Bundle 'quentindecock/vim-cucumber-align-pipes'
    Bundle 'saltstack/salt-vim'
endif

" ansible-vim
au BufNewFile,BufRead *.ab set filetype=ansible_hosts
au BufNewFile,BufRead ansible.cfg set filetype=ansible
let g:ansible_extra_syntaxes = "sh.vim ruby.vim"
let g:ansible_attribute_highlight = "ob"
let g:ansible_name_highlight = 'd'
let g:ansible_extra_keywords_highlight = 1

" syntastic ignore some warning
let g:syntastic_eruby_ruby_quiet_messages =
    \ {'regex': 'possibly useless use of a variable in void context'}

" NERDTreeChDirMode
let NERDTreeChDirMode=2
